{"version":3,"sources":["components/ContextButton/context/index.tsx","components/Button.tsx","components/ContextButton/index.tsx","components/ButtonsPanel.tsx","components/ReduxButton/index.tsx","components/ReduxButton/redux/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Context","React","createContext","ContextProvider","children","useState","state","setState","Provider","value","Button","styled","button","ContextButton","name","console","log","useContext","increment","prev","useEffect","onClick","Container","div","ChildrenContainer","ButtonsPanel","header","footer","ReduxButton","useSelector","dispatch","useDispatch","type","payload","reducer","action","ReduxProvider","store","createStore","App","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAOMA,EAAUC,IAAMC,cAA4B,MAE5CC,EAA4B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACxBC,mBAAS,IADe,mBAC3CC,EAD2C,KACpCC,EADoC,KAElD,OACE,cAACP,EAAQQ,SAAT,CAAkBC,MAAO,CAAEH,QAAOC,YAAlC,SAA+CH,K,4LCVnD,IAWeM,EAXAC,IAAOC,OAAV,KCuBGC,EAjBwB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxCC,QAAQC,IAAIF,GADuC,MFS5CG,qBAAyBjB,GENxBM,EAH2C,EAG3CA,MAAOC,EAHoC,EAGpCA,SAEf,SAASW,IACPX,GAAS,SAACY,GAAD,mBAAC,eACLA,GADI,kBAENL,EAA6B,kBAAfK,EAAKL,GAAqBK,EAAKL,GAAQ,EAAI,OAM9D,OAFAM,oBAAUF,EAAW,IAEd,cAAC,EAAD,CAAQG,QAASH,EAAjB,SAA6BZ,EAAMQ,M,yXCf5C,IAAMQ,EAAYX,IAAOY,IAAV,KAaTC,EAAoBb,IAAOY,IAAV,KAiBRE,EAVuB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQvB,EAAe,EAAfA,SACvD,OACE,eAACkB,EAAD,WACGI,EACD,cAACF,EAAD,UAAoBpB,IACnBuB,M,OCFQC,EArBsB,SAAC,GAAc,IAAZd,EAAW,EAAXA,KACtCC,QAAQC,IAAIF,GAEZ,IAAML,EAAQoB,aAAY,SAACvB,GAAD,OAAkBA,EAAMQ,MAC5CgB,EAAWC,cAEjB,SAASb,IACPY,EAAS,CACPE,KAAM,MACNC,QAAS,CACPnB,KAAMA,EACNL,MAAwB,kBAAVA,EAAqBA,EAAQ,EAAI,KAOrD,OAFAW,oBAAUF,EAAW,IAEd,cAAC,EAAD,CAAQG,QAASH,EAAjB,SAA6BT,K,QChBhCyB,EAAkC,WAAyB,IAAxB5B,EAAuB,uDAAf,GAAI6B,EAAW,uCAC9D,GAAoB,QAAhBA,EAAOH,KAAgB,CAAC,IAAD,EACDG,EAAOF,QAAvBnB,EADiB,EACjBA,KAAML,EADW,EACXA,MACd,OAAO,2BACFH,GADL,kBAEGQ,EAAOL,IAGV,OAAOH,GAIL8B,EAA0B,SAAC,GAAkB,IAAhBhC,EAAe,EAAfA,SACjC,OAAO,cAAC,IAAD,CAAUiC,MAAOC,YAAYJ,GAA7B,SAAwC9B,K,0GCfjD,IAAMkB,EAAYX,IAAOY,IAAV,KAiCAgB,EA5BO,WACpB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEb,OAAO,UACPC,OAAM,wtBAFR,SAIE,cAAC,EAAD,UACG,CAAC,kBAAmB,mBAAmBa,KAAI,SAAC1B,GAAD,OAC1C,cAAC,EAAD,CAA0BA,KAAMA,GAAZA,UAK1B,cAAC,EAAD,CACEY,OAAO,QACPC,OAAM,4sBAFR,SAIE,cAAC,EAAD,UACG,CAAC,gBAAiB,iBAAiBa,KAAI,SAAC1B,GAAD,OACtC,cAAC,EAAD,CAAwBA,KAAMA,GAAZA,cCpBf2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad005315.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react'\n\ntype ContextValue = {\n  state: Indexable<number>\n  setState: React.Dispatch<React.SetStateAction<Indexable<number>>>\n}\n\nconst Context = React.createContext<ContextValue>(null!)\n\nconst ContextProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState({})\n  return (\n    <Context.Provider value={{ state, setState }}>{children}</Context.Provider>\n  )\n}\n\nfunction useContextState() {\n  return useContext<ContextValue>(Context)\n}\n\nexport { ContextProvider, useContextState }\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n  width: 100px;\n  height: 100px;\n\n  font-size: 30px;\n\n  &:last-child {\n    margin-left: 10px;\n  }\n`\n\nexport default Button\n","import { useContextState } from './context'\nimport Button from 'components/Button'\nimport { useEffect } from 'react'\n\ntype Props = {\n  name: string\n}\n\nconst ContextButton: React.FC<Props> = ({ name }) => {\n  console.log(name)\n\n  const { state, setState } = useContextState()\n\n  function increment() {\n    setState((prev) => ({\n      ...prev,\n      [name]: typeof prev[name] === 'number' ? prev[name] + 1 : 0,\n    }))\n  }\n\n  useEffect(increment, [])\n\n  return <Button onClick={increment}>{state[name]}</Button>\n}\n\nexport default ContextButton\n","import styled from 'styled-components'\n\ntype Props = {\n  header: string\n  footer: string\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  text-align: justify;\n  min-width: 0;\n\n  &:last-child {\n    margin-left: 40px;\n  }\n`\n\nconst ChildrenContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  margin: 20px 0;\n`\n\nconst ButtonsPanel: React.FC<Props> = ({ header, footer, children }) => {\n  return (\n    <Container>\n      {header}\n      <ChildrenContainer>{children}</ChildrenContainer>\n      {footer}\n    </Container>\n  )\n}\n\nexport default ButtonsPanel\n","import { useDispatch, useSelector } from 'react-redux'\nimport type { State, Action } from './redux'\nimport Button from 'components/Button'\nimport { useEffect } from 'react'\n\ntype Props = {\n  name: string\n}\n\nconst ReduxButton: React.FC<Props> = ({ name }) => {\n  console.log(name)\n\n  const value = useSelector((state: State) => state[name])\n  const dispatch = useDispatch()\n\n  function increment() {\n    dispatch({\n      type: 'SET',\n      payload: {\n        name: name,\n        value: typeof value === 'number' ? value + 1 : 0,\n      },\n    })\n  }\n\n  useEffect(increment, [])\n\n  return <Button onClick={increment}>{value}</Button>\n}\n\nexport default ReduxButton\n","import { createStore, Reducer, Action as ActionBase } from 'redux'\nimport { Provider } from 'react-redux'\n\ntype State = Indexable\ntype Action = ActionBase<'SET'> & {\n  payload: {\n    name: string\n    value: number\n  }\n}\n\nconst reducer: Reducer<State, Action> = (state = {}, action) => {\n  if (action.type === 'SET') {\n    const { name, value } = action.payload\n    return {\n      ...state,\n      [name]: value,\n    }\n  } else {\n    return state\n  }\n}\n\nconst ReduxProvider: React.FC = ({ children }) => {\n  return <Provider store={createStore(reducer)}>{children}</Provider>\n}\n\nexport { ReduxProvider }\nexport type { State, Action }\n","import ContextButton from 'components/ContextButton'\nimport styled from 'styled-components'\n\nimport ButtonsPanel from 'components/ButtonsPanel'\nimport { ContextProvider } from 'components/ContextButton/context'\n\nimport ReduxButton from 'components/ReduxButton'\nimport { ReduxProvider } from 'components/ReduxButton/redux'\n\nconst Container = styled.div`\n  display: flex;\n  width: 500px;\n`\n\nconst App: React.FC = () => {\n  return (\n    <Container>\n      <ButtonsPanel\n        header='Context'\n        footer={`При каждом клике, в консоль печатается 2 записи, т.к. обновляется объект контекста и перерендериваются все дочерние компоненты (т.е. обе кнопки).`}\n      >\n        <ContextProvider>\n          {['ContextButton-1', 'ContextButton-2'].map((name) => (\n            <ContextButton key={name} name={name} />\n          ))}\n        </ContextProvider>\n      </ButtonsPanel>\n\n      <ButtonsPanel\n        header='Redux'\n        footer={`При каждом клике, в консоль печатается 1 запись, т.к. Redux перерендеривает только тех подписчиков для которых обновились данные (т.е. одна кнопка).`}\n      >\n        <ReduxProvider>\n          {['ReduxButton-1', 'ReduxButton-2'].map((name) => (\n            <ReduxButton key={name} name={name} />\n          ))}\n        </ReduxProvider>\n      </ButtonsPanel>\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './styles/index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}