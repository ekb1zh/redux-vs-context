{"version":3,"sources":["components/ButtonsPanel.tsx","components/ContextButton/context/index.tsx","components/Button.tsx","components/ContextButton/index.tsx","components/ReduxButton/index.tsx","components/ReduxButton/redux/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Container","styled","div","ChildrenContainer","ButtonsPanel","header","footer","children","Context","React","createContext","ContextProvider","useState","state","setState","Provider","value","Button","button","ContextButton","name","console","log","useContext","increment","prev","useEffect","onClick","ReduxButton","useSelector","dispatch","useDispatch","type","payload","reducer","action","ReduxProvider","store","createStore","App","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"glBAOA,IAAMA,EAAYC,IAAOC,IAAV,KAaTC,EAAoBF,IAAOC,IAAV,KAiBRE,EAVuB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACvD,OACE,eAACP,EAAD,WACGK,EACD,cAACF,EAAD,UAAoBI,IACnBD,M,sBCzBDE,EAAUC,IAAMC,cAA4B,MAE5CC,EAA4B,SAAC,GAAkB,IAAhBJ,EAAe,EAAfA,SAAe,EACxBK,mBAAS,IADe,mBAC3CC,EAD2C,KACpCC,EADoC,KAElD,OACE,cAACN,EAAQO,SAAT,CAAkBC,MAAO,CAAEH,QAAOC,YAAlC,SAA+CP,K,wLCVnD,IAWeU,EAXAhB,IAAOiB,OAAV,KCuBGC,EAjBwB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACxCC,QAAQC,IAAIF,GADuC,MFS5CG,qBAAyBf,GENxBK,EAH2C,EAG3CA,MAAOC,EAHoC,EAGpCA,SAETU,EAAY,WAChBV,GAAS,SAACW,GAAD,mBAAC,eACLA,GADI,kBAENL,EAA6B,kBAAfK,EAAKL,GAAqBK,EAAKL,GAAQ,EAAI,QAM9D,OAFAM,oBAAUF,EAAW,IAEd,cAAC,EAAD,CAAQG,QAASH,EAAjB,SAA6BX,EAAMO,M,OCQ7BQ,EArBsB,SAAC,GAAc,IAAZR,EAAW,EAAXA,KACtCC,QAAQC,IAAIF,GAEZ,IAAMJ,EAAQa,aAAY,SAAChB,GAAD,OAAkBA,EAAMO,MAC5CU,EAAWC,cAEXP,EAAY,WAChBM,EAAS,CACPE,KAAM,MACNC,QAAS,CACPb,KAAMA,EACNJ,MAAwB,kBAAVA,EAAqBA,EAAQ,EAAI,MAOrD,OAFAU,oBAAUF,EAAW,IAEd,cAAC,EAAD,CAAQG,QAASH,EAAjB,SAA6BR,K,QChBhCkB,EAAkC,WAAyB,IAAxBrB,EAAuB,uDAAf,GAAIsB,EAAW,uCAC9D,GAAoB,QAAhBA,EAAOH,KAAgB,CAAC,IAAD,EACDG,EAAOF,QAAvBb,EADiB,EACjBA,KAAMJ,EADW,EACXA,MACd,OAAO,2BACFH,GADL,kBAEGO,EAAOJ,IAGV,OAAOH,GAILuB,EAA0B,SAAC,GAAkB,IAAhB7B,EAAe,EAAfA,SACjC,OAAO,cAAC,IAAD,CAAU8B,MAAOC,YAAYJ,GAA7B,SAAwC3B,K,0GCdjD,IAAMP,EAAYC,IAAOC,IAAV,KAmCAqC,EA9BO,WACpB,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACElC,OAAO,UACPC,OAAM,uyBAFR,SAIE,cAAC,EAAD,UACG,CAAC,0BAA2B,2BAA2BkC,KACtD,SAACpB,GAAD,OACE,cAAC,EAAD,CAA0BA,KAAMA,GAAZA,UAM5B,cAAC,EAAD,CACEf,OAAO,QACPC,OAAM,2xBAFR,SAIE,cAAC,EAAD,UACG,CAAC,wBAAyB,yBAAyBkC,KAAI,SAACpB,GAAD,OACtD,cAAC,EAAD,CAAwBA,KAAMA,GAAZA,cCvBfqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2fd629c7.chunk.js","sourcesContent":["import styled from 'styled-components'\n\ntype Props = {\n  header: string\n  footer: string\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  text-align: justify;\n  min-width: 0;\n\n  &:not(:first-child) {\n    margin-left: 40px;\n  }\n`\n\nconst ChildrenContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  margin: 20px 0;\n`\n\nconst ButtonsPanel: React.FC<Props> = ({ header, footer, children }) => {\n  return (\n    <Container>\n      {header}\n      <ChildrenContainer>{children}</ChildrenContainer>\n      {footer}\n    </Container>\n  )\n}\n\nexport default ButtonsPanel\n","import React, { useContext, useState } from 'react'\n\ntype ContextValue = {\n  state: Indexable<number>\n  setState: React.Dispatch<React.SetStateAction<Indexable<number>>>\n}\n\nconst Context = React.createContext<ContextValue>(null!)\n\nconst ContextProvider: React.FC = ({ children }) => {\n  const [state, setState] = useState({})\n  return (\n    <Context.Provider value={{ state, setState }}>{children}</Context.Provider>\n  )\n}\n\nconst useContextState = () => {\n  return useContext<ContextValue>(Context)\n}\n\nexport { ContextProvider, useContextState }\n","import styled from 'styled-components'\n\nconst Button = styled.button`\n  width: 100px;\n  height: 100px;\n\n  font-size: 30px;\n\n  &:not(:first-child) {\n    margin-left: 10px;\n  }\n`\n\nexport default Button\n","import { useContextState } from './context'\nimport Button from 'components/Button'\nimport { useEffect } from 'react'\n\ntype Props = {\n  name: string\n}\n\nconst ContextButton: React.FC<Props> = ({ name }) => {\n  console.log(name)\n\n  const { state, setState } = useContextState()\n\n  const increment = () => {\n    setState((prev) => ({\n      ...prev,\n      [name]: typeof prev[name] === 'number' ? prev[name] + 1 : 0,\n    }))\n  }\n\n  useEffect(increment, [])\n\n  return <Button onClick={increment}>{state[name]}</Button>\n}\n\nexport default ContextButton\n","import { useDispatch, useSelector } from 'react-redux'\nimport type { State, Action } from './redux'\nimport Button from 'components/Button'\nimport { useEffect } from 'react'\n\ntype Props = {\n  name: string\n}\n\nconst ReduxButton: React.FC<Props> = ({ name }) => {\n  console.log(name)\n\n  const value = useSelector((state: State) => state[name])\n  const dispatch = useDispatch()\n\n  const increment = () => {\n    dispatch({\n      type: 'SET',\n      payload: {\n        name: name,\n        value: typeof value === 'number' ? value + 1 : 0,\n      },\n    })\n  }\n\n  useEffect(increment, [])\n\n  return <Button onClick={increment}>{value}</Button>\n}\n\nexport default ReduxButton\n","import { createStore, Reducer, Action as ActionBase } from 'redux'\nimport { Provider } from 'react-redux'\n\ntype State = Indexable\ntype Action = ActionBase<'SET'> & {\n  payload: {\n    name: string\n    value: number\n  }\n}\n\nconst reducer: Reducer<State, Action> = (state = {}, action) => {\n  if (action.type === 'SET') {\n    const { name, value } = action.payload\n    return {\n      ...state,\n      [name]: value,\n    }\n  } else {\n    return state\n  }\n}\n\nconst ReduxProvider: React.FC = ({ children }) => {\n  return <Provider store={createStore(reducer)}>{children}</Provider>\n}\n\nexport { ReduxProvider }\nexport type { State, Action }\n","import styled from 'styled-components'\n\nimport ButtonsPanel from 'components/ButtonsPanel'\n\nimport ContextButton from 'components/ContextButton'\nimport { ContextProvider } from 'components/ContextButton/context'\n\nimport ReduxButton from 'components/ReduxButton'\nimport { ReduxProvider } from 'components/ReduxButton/redux'\n\nconst Container = styled.div`\n  display: flex;\n  width: 500px;\n`\n\nconst App: React.FC = () => {\n  return (\n    <Container>\n      <ButtonsPanel\n        header='Context'\n        footer={`При клике по кнопке, в консоль печатается 2 записи, т.к. обновляется объект контекста и перерендериваются все дочерние компоненты (в данном случае обе кнопки).`}\n      >\n        <ContextProvider>\n          {['Updated ContextButton-1', 'Updated ContextButton-2'].map(\n            (name) => (\n              <ContextButton key={name} name={name} />\n            ),\n          )}\n        </ContextProvider>\n      </ButtonsPanel>\n\n      <ButtonsPanel\n        header='Redux'\n        footer={`При клике по кнопке, в консоль печатается 1 запись, т.к. Redux перерендеривает только тех подписчиков для которых обновились данные (в данном случае одна кнопка).`}\n      >\n        <ReduxProvider>\n          {['Updated ReduxButton-1', 'Updated ReduxButton-2'].map((name) => (\n            <ReduxButton key={name} name={name} />\n          ))}\n        </ReduxProvider>\n      </ButtonsPanel>\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport './styles/index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}